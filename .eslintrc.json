{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nx"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@typescript-eslint/ban-ts-comment": ["warn", {}],
        "@nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": false,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": ["plugin:@nx/typescript"],
      "rules": {
        "@typescript-eslint/no-unused-vars": "error"
      }
    },
    {
      "files": ["*.spec.ts", "*.spec.tsx", "*.spec.js", "*.spec.jsx"],
      "env": {
        "jest": true
      },
      "rules": {}
    },
    {
      "files": ["*.json"],
      "parser": "jsonc-eslint-parser",
      "rules": {
        "@nx/dependency-checks": "off"
      }
    },
    {
      "files": ["**/*.js", "**/*.ts"],
      "excludedFiles": [
        "**/*.test.js",
        "**/*.spec.js",
        "**/*.test.ts",
        "**/*.spec.ts"
      ],
      "rules": {
        "no-restricted-syntax": [
          "error",
          {
            "selector": "ThrowStatement > NewExpression[callee.name='Error']",
            "message": "Use ZephyrError instead of Error"
          }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "@typescript-eslint/consistent-type-imports": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-misused-promises": "error"
      },
      "excludedFiles": ["webpack.config.ts", "jest.config.ts", "*.spec.tsx"],
      "parserOptions": {
        "projectService": true,
        "tsconfigRootDir": "./"
      }
    }
  ]
}
