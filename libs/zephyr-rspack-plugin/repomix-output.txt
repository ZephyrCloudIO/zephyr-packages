This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  rspack-plugin/
    with-zephyr.ts
    ze-rspack-plugin.ts
  types/
    index.ts
    missing-webpack-types.ts
  index.ts
.eslintrc.json
.npmignore
jest.config.ts
LICENSE
package.json
project.json
README.md
tsconfig.json
tsconfig.lib.json
tsconfig.spec.json

================================================================
Files
================================================================

================
File: src/rspack-plugin/with-zephyr.ts
================
import { Configuration as RspackConfiguration } from '@rspack/core';
import { ZephyrEngine } from 'zephyr-agent';
import { ZeRspackPlugin } from './ze-rspack-plugin';
import { ZephyrRspackPluginOptions } from '../types';
import {
  extractFederatedDependencyPairs,
  makeCopyOfModuleFederationOptions,
  mutWebpackFederatedRemotesConfig,
} from 'zephyr-xpack-internal';

export type Configuration = RspackConfiguration;

export function withZephyr(
  zephyrPluginOptions?: ZephyrRspackPluginOptions
): (config: Configuration) => Promise<Configuration> {
  return (config) => _zephyr_configuration(config, zephyrPluginOptions);
}

async function _zephyr_configuration(
  config: Configuration,
  _zephyrOptions?: ZephyrRspackPluginOptions
): Promise<Configuration> {
  // create instance of ZephyrEngine to track the application
  const zephyr_engine = await ZephyrEngine.create({
    builder: 'rspack',
    context: config.context,
  });

  // Resolve dependencies and update the config
  const dependencyPairs = extractFederatedDependencyPairs(config);

  const resolved_dependency_pairs =
    await zephyr_engine.resolve_remote_dependencies(dependencyPairs);

  mutWebpackFederatedRemotesConfig(zephyr_engine, config, resolved_dependency_pairs);

  // inject the ZephyrRspackPlugin
  config.plugins?.push(
    new ZeRspackPlugin({
      zephyr_engine,
      mfConfig: makeCopyOfModuleFederationOptions(config),
      wait_for_index_html: _zephyrOptions?.wait_for_index_html,
    })
  );

  return config;
}

================
File: src/rspack-plugin/ze-rspack-plugin.ts
================
import { ZephyrEngine } from 'zephyr-agent';

import {
  ModuleFederationPlugin,
  logBuildSteps,
  setupZeDeploy,
} from 'zephyr-xpack-internal';
import { Compiler } from '@rspack/core';

const pluginName = 'ZeRspackPlugin';

export interface ZephyrRspackInternalPluginOptions {
  zephyr_engine: ZephyrEngine;
  // rspack plugin name
  pluginName: string;
  // federated module config
  mfConfig: ModuleFederationPlugin[] | ModuleFederationPlugin | undefined;
  // hacks
  wait_for_index_html?: boolean;
  // outputPath?: string;
}

export class ZeRspackPlugin {
  _options: ZephyrRspackInternalPluginOptions;

  constructor(options: Omit<ZephyrRspackInternalPluginOptions, 'pluginName'>) {
    this._options = Object.assign({ pluginName }, options);
  }

  apply(compiler: Compiler): void {
    this._options.zephyr_engine.buildProperties.output = compiler.outputPath;

    logBuildSteps(this._options, compiler);
    setupZeDeploy(this._options, compiler);
  }
}

================
File: src/types/index.ts
================
export interface ZephyrRspackPluginOptions {
  // hacks
  // todo: add link to documentation and sample how this should be used and when
  wait_for_index_html?: boolean;
}

================
File: src/types/missing-webpack-types.ts
================
import { XPackConfiguration } from 'zephyr-xpack-internal';
import { Compiler } from '@rspack/core';

export type RspackConfiguration = XPackConfiguration<Compiler>;

================
File: src/index.ts
================
export { withZephyr } from './rspack-plugin/with-zephyr';

// hacks
export { onDeploymentDone } from 'zephyr-xpack-internal';
export { resolveIndexHtml } from 'zephyr-agent';

================
File: .eslintrc.json
================
{
  "extends": ["../../.eslintrc.json"],
  "ignorePatterns": ["!**/*"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "parserOptions": {
        "project": ["libs/zephyr-rspack-plugin/tsconfig.*?.json"]
      },
      "rules": {}
    },
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {
            "allowExpressions": true
          }
        ]
      }
    },
    {
      "files": ["*.js", "*.jsx"],
      "rules": {}
    }
  ]
}

================
File: .npmignore
================
src
tsconfig.*
jest.config.ts
project.json
.eslintrc.json

================
File: jest.config.ts
================
export default {
  displayName: 'zephyr-rspack-plugin',
  preset: '../../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\.[tj]s$': ['ts-jest', { tsconfig: '<rootDir>/tsconfig.spec.json' }],
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../../coverage/libs/zephyr-rspack-plugin',
};

================
File: LICENSE
================
Apache License
   Version 2.0, January 2004
http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

  "License" shall mean the terms and conditions for use, reproduction,
  and distribution as defined by Sections 1 through 9 of this document.

   ...

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

  To apply the Apache License to your work, attach the following
  boilerplate notice, with the fields enclosed by brackets "[]"
  replaced with your own identifying information. (Don't include
  the brackets!)  The text should be enclosed in the appropriate
  comment syntax for the file format. We also recommend that a
  file or class name and description of purpose be included on the
  same line as the copyright notice for each file. The "copyright"
  word should be left as is (without quotes).

   Copyright [2023] [Zephyr Cloud]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

================
File: package.json
================
{
  "name": "zephyr-rspack-plugin",
  "version": "0.0.35",
  "license": "Apache-2.0",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "type": "commonjs",
  "scripts": {
    "build": "nx run zephyr-rspack-plugin:build",
    "patch-version": "pnpm version"
  },
  "dependencies": {
    "@module-federation/automatic-vendor-federation": "1.2.1",
    "@rspack/core": "^1.1.3",
    "is-ci": "^3.0.1",
    "tslib": "^2.3.0",
    "zephyr-agent": "workspace:*",
    "zephyr-xpack-internal": "workspace:*"
  },
  "devDependencies": {
    "@types/is-ci": "^3.0.4",
    "@types/node-persist": "^3.1.8"
  }
}

================
File: project.json
================
{
  "name": "zephyr-rspack-plugin",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "libs/zephyr-rspack-plugin/src",
  "projectType": "library",
  "targets": {
    "build": {
      "executor": "@nx/js:tsc",
      "outputs": ["{options.outputPath}"],
      "options": {
        "rootDir": "libs/zephyr-rspack-plugin/src",
        "outputPath": "libs/zephyr-rspack-plugin/dist",
        "tsConfig": "libs/zephyr-rspack-plugin/tsconfig.lib.json",
        "main": "libs/zephyr-rspack-plugin/src/index.ts"
      }
    },
    "publish": {
      "command": "node tools/scripts/publish.mjs zephyr-rspack-plugin {args.ver} {args.tag}",
      "dependsOn": ["build"]
    },
    "release": {
      "command": "pnpm dist-tag add zephyr-rspack-plugin@$(npm view zephyr-rspack-plugin@next version) latest"
    },
    "lint": {
      "executor": "@nx/eslint:lint",
      "outputs": ["{options.outputFile}"]
    },
    "test": {
      "executor": "@nx/jest:jest",
      "outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
      "options": {
        "jestConfig": "libs/zephyr-rspack-plugin/jest.config.ts"
      }
    }
  },
  "tags": []
}

================
File: README.md
================
# zephyr-rspack-plugin

<div align="center">

[Zephyr Cloud](https://zephyr-cloud.io) | [Zephyr Docs](https://docs.zephyr-cloud.io/recipes/rspack-react) | [Rspack Docs](https://rspack.dev) | [Discord](https://zephyr-cloud.io/discord) | [Twitter](https://x.com/ZephyrCloudIO) | [LinkedIn](https://www.linkedin.com/company/zephyr-cloud/)

<hr/>
</div>

`zephyr-rspack-plugin` is a plugin to deploy application built with [Rspack](https://rspack.dev). Read more from our documentation [here](https://docs.zephyr-cloud.io/recipes/react-rspack-nx).

## Installation

```
# npm
npm install --save-dev zephyr-rspack-plugin
# yarn
yarn add --dev zephyr-rspack-plugin
# pnpm
pnpm add --dev zephyr-rspack-plugin
# bun
bun add --dev zephyr-rspack-plugin
```

## Usage

### With Nx and Rspack

```
export default composePlugins(
  withNx(),
  withReact(),
  withModuleFederation(mfConfig),
  withZephyr(),
  (config) => {
    return config;
  }
);
```

### With Rspack directly

```
module.exports = withZephyr()(your_rspack_config);

```

================
File: tsconfig.json
================
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "module": "commonjs",
    "target": "ES2020",
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "allowSyntheticDefaultImports": true
  },
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.lib.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ]
}

================
File: tsconfig.lib.json
================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../../dist/out-tsc",
    "declaration": true,
    "types": ["node"]
  },
  "exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"],
  "include": ["src/**/*.ts"]
}

================
File: tsconfig.spec.json
================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../../dist/out-tsc",
    "types": ["jest", "node"]
  },
  "include": [
    "jest.config.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ],
  "exclude": ["dist"]
}



================================================================
End of Codebase
================================================================
